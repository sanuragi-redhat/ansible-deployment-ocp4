- name: Create Vault admin user with token
  hosts: vault.lab.redhat-workshop.in
  gather_facts: no
  vars:
    vault_addr: "http://vault.lab.redhat-workshop.in:8200"
    vault_root_token: ""
    admin_username: "user"
    admin_password: ""
    admin_policy_name: "admin"

  tasks:

    - name: Enable userpass auth method (ignore if already enabled)
      ansible.builtin.shell: "vault auth enable userpass || true"
      args:
        executable: /bin/bash
      environment:
        VAULT_ADDR: "{{ vault_addr }}"
        VAULT_TOKEN: "{{ vault_root_token }}"

    - name: Create admin policy file
      ansible.builtin.copy:
        dest: "/tmp/{{ admin_policy_name }}.hcl"
        content: |
          path "*" {
            capabilities = ["create", "read", "update", "delete", "list", "sudo"]
          }

    - name: Apply admin policy
      ansible.builtin.shell: "vault policy write {{ admin_policy_name }} /tmp/{{ admin_policy_name }}.hcl"
      args:
        executable: /bin/bash
      environment:
        VAULT_ADDR: "{{ vault_addr }}"
        VAULT_TOKEN: "{{ vault_root_token }}"

    - name: Create Vault admin user
      ansible.builtin.shell: >
        vault write auth/userpass/users/{{ admin_username }}
        password='{{ admin_password }}'
        policies='{{ admin_policy_name }}'
      args:
        executable: /bin/bash
      environment:
        VAULT_ADDR: "{{ vault_addr }}"
        VAULT_TOKEN: "{{ vault_root_token }}"

    - name: Create a long-lived token for admin user
      ansible.builtin.shell: >
        vault token create -policy="{{ admin_policy_name }}" -orphan -ttl="8760h" -format=json
      args:
        executable: /bin/bash
      environment:
        VAULT_ADDR: "{{ vault_addr }}"
        VAULT_TOKEN: "{{ vault_root_token }}"
      register: vault_token_output
    - name: Show admin token
      ansible.builtin.debug:
        msg: "{{ (vault_token_output.stdout | from_json).auth.client_token }}"
